<?php

namespace ronashdkl\kodCms\modules\admin\controllers;

use ronashdkl\kodCms\config\AppData;
use ronashdkl\kodCms\models\post\PostEnquiry;
use ronashdkl\kodCms\models\post\PostEnquirySearch;
use ronashdkl\kodCms\models\post\PostLanguageFilter;
use ronashdkl\kodCms\models\post\PostModel;
use ronashdkl\kodCms\models\UserProject;
use ronashdkl\kodCms\modules\admin\actions\CreateCredentialAction;
use ronashdkl\kodCms\modules\admin\actions\ViewCredentialAction;
use ronashdkl\kodCms\modules\admin\assets\AdminAsset;
use Yii;
use ronashdkl\kodCms\modules\admin\models\Post;
use ronashdkl\kodCms\modules\admin\models\PostSearch;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\helpers\VarDumper;
use yii\httpclient\Client;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\Response;
use yii\web\View;

/**
 * PostController implements the CRUD actions for Post model.
 */
class PostController extends Controller
{

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->getView()->registerAssetBundle(AdminAsset::className());
    }

    /**
     * Lists all Post models.
     * @return mixed
     */
    public function actionIndex()
    {

        $searchModel = new PostSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $dataProvider->query->andWhere(['published' => 1])->andWhere(['removed_by' => null]);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Lists all Post models.
     * @return mixed
     */
    public function actionDraft()
    {
        $searchModel = new PostSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $dataProvider->query->draft()->trash(false);
        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Lists all Post models.
     * @return mixed
     */
    public function actionTrash()
    {
        $searchModel = new PostSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $dataProvider->query->trash(true);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Post model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        $model = PostModel::findOne($id);

        if ($model == null) {
            throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
        }

        return $this->render('view', [
            'model' => $model,


        ]);

    }

    private function projectView($id, $model)
    {
        $assignModel = new UserProject();
        $assignModel->project_id = $id;
        if ($assignModel->load(Yii::$app->request->post())) {
            $error = false;
            if (is_array($assignModel->user_id)) {
                foreach ($assignModel->user_id as $user) {
                    $userProject = [
                        'user_id' => $user,
                        'project_id' => $id
                    ];
                    $assign = new UserProject();
                    if (!UserProject::find()->where(['user_id' => $user])->andWhere(['project_id' => $id])->exists()) {
                        $assign->setAttributes($userProject);
                        if (!$assign->save()) {
                            $error = true;
                            Yii::$app->session->setFlash('error', $assign->getFirstError('project_id') . ' ' . $assign->getFirstError('user_id'));
                        }
                    }
                }
            } else {
                if (!UserProject::find()->where(['user_id' => $assignModel->user_id])->andWhere(['project_id' => $id])->exists()) {
                    if (!$assignModel->save()) {
                        $error = true;
                        Yii::$app->session->setFlash('error', $assignModel->getFirstError('project_id') . ' ' . $assignModel->getFirstError('user_id'));

                    }
                }
            }

            if (!$error) {
                unset($assign);
                unset($assignModel);
                Yii::$app->session->setFlash('success', 'Successfully Assigned');

                return $this->render('/projects/index', [
                    'model' => $model,

                    'assignModel' => new UserProject()
                ]);
            }

        }
        return $this->render('/projects/index', [
            'model' => $model,

            'assignModel' => $assignModel


        ]);


    }

    private function ticketView($id, $model)
    {

        return $this->render('ticket', [
            'model' => $model,
        ]);


    }

    public function actionEnquiry($id)
    {
        $model = PostEnquiry::findOne(['id' => $id]);
        \Yii::$app->response->format = Response::FORMAT_JSON;
        $return = ['title' => " Enquiry for " . Html::a($model->post->title, ['/product', 'slug' => $model->post->slug], ['target' => '_blank']), 'content' => null, 'footer' => null];

        if (!$model) {
            $return['title'] = 'Enquiry not found';
            $return['footer'] = Html::button('Close', ['class' => 'btn btn-danger pull-left', 'data-dismiss' => "modal"]);
            return $return;
        }
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            $return['forceReload'] = '#crud-datatable-pjax';
            $return['content'] = "Enquiry marked as seen!";
            $return['footer'] = Html::button('Close', ['class' => 'btn btn-danger pull-left', 'data-dismiss' => "modal"]);
            return $return;
        }
        $return['content'] = $this->renderAjax('enquiry', ['model' => $model]);
        $return['footer'] = Html::button('Close', ['class' => 'btn btn-danger pull-left', 'data-dismiss' => "modal"]) . Html::button('Save', ['class' => 'btn btn-primary pull-right', 'type' => 'submit']);
        return $return;
    }
    /**
     * Creates a new Post model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Post();
        $model->published = 1;
        $model->draft = 0;

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }
        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Creates a new Post model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreateProject()
    {
        $model = new Post();
        $model->published = 1;
        $model->draft = 0;
        $model->tree_id = AppData::PROJECT;
        $model->body = $this->renderAjax('/post/_credentialTemplate');

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }
        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Creates a new Post model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreateTicket()
    {
        $model = new Post();
        $model->published = 1;
        $model->draft = 0;
        $model->tree_id = AppData::TICKET;
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }
        return $this->render('create', [
            'model' => $model,
        ]);
    }


    /**
     * Updates an existing Post model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model
        ]);
    }

    /**
     * Deletes an existing Post model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();
        return $this->redirect(Yii::$app->request->referrer);
    }

    /**
     * Finds the Post model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Post the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function findModel($id)
    {

        if (($model = Post::findOne($id)) !== null) {
            return $model;
        }
        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
    }
}
