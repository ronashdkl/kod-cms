<?php

namespace ronashdkl\kodCms\modules\admin\models;

use ronashdkl\kodCms\modules\admin\models\behaviours\Logbehaviour;
use Imagine\Image\Box;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\helpers\FileHelper;
use yii\helpers\VarDumper;
use yii\imagine\Image;
use yii\web\UploadedFile;

/**
 * This is the model class for table "gallery".
 *
 * @property int $id
 * @property string $slug
 * @property string $name
 * @property string $body
 * @property string $images
 * @property int $draft
 * @property int $featured
 * @property int $published
 * @property string $created_at
 * @property int $created_by
 * @property string $updated_at
 * @property int $updated_by
 * @property string $removed_at
 * @property int $removed_by
 */
class Gallery extends \yii\db\ActiveRecord
{
    const BEFORE_SAVE = 'before_save';
    const BEFORE_DELETE = 'before_delete';
    const AFTER_SAVE = 'after_save';
    const SOFT_DELETE = 'soft_delete';
    public $media;

    public function init()
    {
        $this->on(self::AFTER_SAVE, [$this, 'setMedia']);
        $this->on(self::BEFORE_SAVE, [$this, 'restore']);
        $this->on(self::BEFORE_DELETE, [$this, 'removeMediaDirectory']);
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'gallery';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['name', 'required'],
            [['media', 'slug', 'created_at', 'created_by', 'updated_at', 'updated_by'], 'safe'],
            [['body', 'images'], 'string'],
            [['draft', 'featured', 'published', 'created_by', 'updated_by', 'removed_by'], 'integer'],
            [['created_at', 'updated_at', 'removed_at'], 'safe'],
            [['slug'], 'string', 'max' => 255],
            [['name'], 'string', 'max' => 200],
        ];
    }

    public function behaviors()
    {
        return [
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'name',
                'immutable' => true,
                'ensureUnique' => true
            ],
            BlameableBehavior::className(),
            [
                'class' => TimestampBehavior::className(),
                'value' => date('Y-m-d h:i')
            ],
            [
                'class' => Logbehaviour::class,
                'attribute' => 'name',
            ]

        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'slug' => Yii::t('app', 'Slug'),
            'name' => Yii::t('app', 'Name'),
            'body' => Yii::t('app', 'Body'),
            'images' => Yii::t('app', 'Images'),
            'draft' => Yii::t('app', 'Draft'),
            'featured' => Yii::t('app', 'Featured'),
            'published' => Yii::t('app', 'Published'),
            'created_at' => Yii::t('app', 'Created At'),
            'created_by' => Yii::t('app', 'Created By'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'updated_by' => Yii::t('app', 'Updated By'),
            'removed_at' => Yii::t('app', 'Removed At'),
            'removed_by' => Yii::t('app', 'Removed By'),
        ];
    }

    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if (!parent::beforeSave($insert)) {
            return false;
        };
        if ($this->validate()) {
            if ($this->triggerEvent) {
                $this->trigger(self::BEFORE_SAVE);
            }
            return true;

        } else {
            return false;
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
        $this->trigger(self::AFTER_SAVE);
    }

    /**
     * @param bool $hard
     * @return bool|false|int
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function delete($hard = false)
    {
        if ($hard) {
            return parent::delete(); // TODO: Change the autogenerated stub
        } else {
            if ($this->removed_by != null) {
                return $this->delete(true);
            }
            $this->removed_at = date('Y-m-d h:i');
            $this->removed_by = Yii::$app->user->identity->getId();
            $this->reset();
            $this->trigger(self::SOFT_DELETE);
            $this->triggerEvent = false;
            return $this->save(false);
        }
    }

    /**
     * @return bool
     */
    public function restore()
    {
        if ($this->removed_by == null) {
            return null;
        }
        if ($this->published == 0 && $this->draft == 0) {
            return null;

        }
        $this->removed_by = null;
        $this->removed_at = null;
        $this->triggerEvent = false;
        return $this->save();
    }

    /**
     * Restore from trash
     */
    private function reset()
    {
        $this->published = 0;
        $this->draft = 0;
        $this->featured = 0;
    }

    /**
     * @return void|null setAvatar()
     */
    public function setMedia()
    {


        if ($this->media == null) {
            return null;
        }


        $savePath = Yii::getAlias('@webroot/media/gallery/' . $this->slug);
        if (!is_dir($savePath)) {
            mkdir($savePath, 0777, true);
        }
        $images = explode(",", $this->media);
        foreach ($images as $i => $img) {
            if ($img != null) {
                $img = urldecode($img);
                $imagine = Image::getImagine()->open(Yii::getAlias('@webroot' . $img));
                //  $imagine->resize(new Box(600,800));
                $fileName = uniqid() . '.jpg';
                $imagine->save($savePath . '/' . $fileName);
                unlink(Yii::getAlias('@webroot' . $img));

            }
        }
    }

    public function getMedia()
    {
        try {
            $files = \yii\helpers\FileHelper::findFiles(Yii::getAlias('@webroot/media/gallery/' . $this->slug . '/'));
            if (isset($files[0])) {
                $url = [];
                foreach ($files as $index => $file) {
                    $img = substr($file, strrpos($file, '/') + 1);

                    if (substr($img, 0, 1) != '.') {
                        $url[] = "/media/gallery/" . $this->slug . "/" . $img;
                    }
                }

                return $url;
            }
        }catch (\Exception $e){
            Yii::$app->session->setFlash('warning','Please upload image in galley');
            return [];
        }

    }

    public function getImages($asArray = false, $inputValue = false)
    {

        if ($inputValue) {
            return $images = ["url"];
        }


        return $images = json_decode($this->images, $asArray);


    }

    /**
     * @return bool
     * @throws \yii\base\ErrorException
     */
    public function beforeDelete()
    {
        if (!parent::beforeDelete()) {
            return false;
        }
        $this->trigger(self::BEFORE_DELETE);
        return true;
    }

    /**
     * @return bool
     */
    public function isRemoved()
    {
        if ($this->removed_by == null) {
            return false;
        } else {

            return true;
        }
    }

    public function removeMediaDirectory()
    {
        $cpath = Yii::getAlias('@webroot/media/gallery/' . $this->slug);
        if (is_dir($cpath)) {
            FileHelper::removeDirectory($cpath);
        }
    }

    /**
     * {@inheritdoc}
     * @return \ronashdkl\kodCms\modules\admin\models\activeQuery\GalleryQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \ronashdkl\kodCms\modules\admin\models\activeQuery\GalleryQuery(get_called_class());
    }
}
