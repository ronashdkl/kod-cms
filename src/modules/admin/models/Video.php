<?php

namespace ronashdkl\kodCms\modules\admin\models;

use ronashdkl\kodCms\modules\admin\models\behaviours\Logbehaviour;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\helpers\FileHelper;

/**
 * This is the model class for table "video".
 *
 * @property int $id
 * @property string $title
 * @property string $body
 * @property string $url
 * @property string $video
 * @property int $draft
 * @property int $featured
 * @property int $published
 * @property string $created_at
 * @property int $created_by
 * @property string $updated_at
 * @property int $updated_by
 * @property string $removed_at
 * @property int $removed_by
 */
class Video extends \yii\db\ActiveRecord
{

    const BEFORE_SAVE = 'before_save';
    const AFTER_SAVE = 'after_save';
    const BEFORE_DELETE = 'before_delete';
    const SOFT_DELETE = 'soft_delete';
    public $media;
    public $log = null;

    public function init()
    {
        $this->on(self::AFTER_SAVE, [$this, 'setMedia']);
        $this->on(self::BEFORE_SAVE, [$this, 'restore']);
        $this->on(self::BEFORE_DELETE, [$this, 'unlinkVideo']);
    }
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'video';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title','url'],'required'],
            ['body','safe'],
            [['draft', 'featured', 'published', 'created_by', 'updated_by', 'removed_by'], 'integer'],
            [['created_at', 'created_by', 'updated_at', 'updated_by'], 'safe'],
            [['created_at', 'updated_at', 'removed_at'], 'safe'],
            [['url', 'video'], 'string', 'max' => 255],
            ['url','verifyLink']
        ];
    }



    public function verifyLink($attribute_name, $params)

    {


        if (!strpos($this->$attribute_name, 'youtube.com/watch?v')) {

            $this->addError($attribute_name, Yii::t('app', 'Invalid Link'));


            return false;

        }

    }


        public function behaviors()
    {
        return [
            BlameableBehavior::className(),
            [
                'class' => TimestampBehavior::className(),
                'value' => date('Y-m-d h:i')
            ],
            [
                'class' => Logbehaviour::class,
                'attribute' => 'title',
            ]

        ];
    }
    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'url' => Yii::t('app', 'Youtube Url'),
            'video' => Yii::t('app', 'Video'),
            'draft' => Yii::t('app', 'Draft'),
            'featured' => Yii::t('app', 'Featured'),
            'published' => Yii::t('app', 'Published'),
            'created_at' => Yii::t('app', 'Created At'),
            'created_by' => Yii::t('app', 'Created By'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'updated_by' => Yii::t('app', 'Updated By'),
            'removed_at' => Yii::t('app', 'Removed At'),
            'removed_by' => Yii::t('app', 'Removed By'),
        ];
    }
    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if (!parent::beforeSave($insert)) {
            return false;
        };
        if ($this->validate()) {
            if ($this->triggerEvent) {
                $this->trigger(self::BEFORE_SAVE);
            }
            return true;
        } else {
            return false;
        }

    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
        $this->trigger(self::AFTER_SAVE);
    }
    /**
     * @param bool $hard
     * @return bool|false|int
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function delete($hard = false)
    {
        if ($hard) {
            return parent::delete(); // TODO: Change the autogenerated stub
        } else {
            if ($this->removed_by != null) {
                return $this->delete(true);
            }
            $this->removed_at = date('Y-m-d h:i');
            $this->removed_by = Yii::$app->user->identity->getId();
            $this->reset();
            $this->trigger(self::SOFT_DELETE);
            $this->triggerEvent = false;
            return $this->save(false);
        }
    }

    /**
     * @param bool $url
     * @return bool|string
     */
    public function getCode($url=false){
        if($url){
            return  substr($this->url, strrpos($url, '=') + 1);

        }
       return  substr($this->url, strrpos($this->url, '=') + 1);
    }

    /**
     * @return bool
     */
    public function restore()
    {
        if ($this->removed_by == null) {
            return null;
        }
        if ($this->published == 0 && $this->draft == 0) {
            return null;

        }
        $this->removed_by = null;
        $this->removed_at = null;
        $this->triggerEvent = false;
        return $this->save();
    }

    /**
     * Restore from trash
     */
    private function reset()
    {
        $this->published = 0;
        $this->draft = 0;
        $this->featured = 0;
    }

    /**
     * @return bool
     * @throws \yii\base\ErrorException
     */
    public function beforeDelete()
    {
        if (!parent::beforeDelete()) {
            return false;
        }
        $this->trigger(self::BEFORE_DELETE);
        return true;
    }

    /**
     * @throws \yii\base\ErrorException
     */
    public function unlinkVideo()
    {
        $cpath = Yii::getAlias('@webroot/media/video/' . $this->id);
        if (is_dir($cpath)) {
            FileHelper::removeDirectory($cpath);
        }
    }
    /**
     * @return bool
     */
    public function isRemoved()
    {
        if ($this->removed_by == null) {
            return false;
        } else {

            return true;
        }
    }
    /**
     * @return void|null setAvatar()
     */
    public function setMedia()
    {


        if ($this->media == null) {
            return null;
        }


        $savePath = Yii::getAlias('@webroot/media/video/' . $this->id);
        if (!is_dir($savePath)) {
            mkdir($savePath, 0777, true);
        }

        return null;

    }

    public function getMedia()
    {
        $files = \yii\helpers\FileHelper::findFiles(Yii::getAlias('@webroot/media/video/' . $this->id . '/'));
        if (isset($files[0])) {
            $url = [];
            foreach ($files as $index => $file) {
                $video = substr($file, strrpos($file, '/') + 1);

                if (substr($video, 0, 1) != '.') {
                    $url[] = "/media/video/" . $this->id . "/" . $video;
                }
            }

            return $url;
        }
    }

    /**
     * {@inheritdoc}
     * @return \ronashdkl\kodCms\modules\admin\models\activeQuery\VideoQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \ronashdkl\kodCms\modules\admin\models\activeQuery\VideoQuery(get_called_class());
    }
}
